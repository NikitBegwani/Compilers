Terminals unused in grammar

   MACRO
   TYPEDEF
   GLOBAL
   AMP
   BOOL_DATATYPE
   DATATYPE
   NEGATIVENUMBER
   MOD
   FOR
   DO
   BREAK
   CONTINUE
   GOTO
   SLB
   SRB


State 111 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 $@1: %empty

    2 $@2: %empty

    3 $@3: %empty

    4 prog: fn_def MAIN $@1 rlb rrb clb $@2 stmt_list $@3 crb

    5 var_decl: datatype exps

    6 @4: %empty

    7 exps: ID @4 comma_exps

    8 comma_exps: empty
    9           | comma exps

   10 empty: %empty

   11 stmt_list: %empty
   12          | stmt semi_colon stmt_list

   13 stmt: var_decl
   14     | ASSIGN assignment
   15     | cond_loop
   16     | fn_call

   17 @5: %empty

   18 assignment: ID @5 ASG assignment_prime

   19 assignment_prime: id_or_digits
   20                 | fn_call
   21                 | expr_binary

   22 expressions: expr_rel
   23            | expr_binary

   24 expr_rel: op relop op

   25 op: id_or_digits
   26   | rlb expressions rrb

   27 expr_binary: op_bin bin_op_for op_bin

   28 op_bin: id_or_digits
   29       | rlb expr_binary rrb

   30 op_rel: DIGITS
   31       | BOOL
   32       | expr_rel

   33 cond_loop: if
   34          | while

   35 $@6: %empty

   36 $@7: %empty

   37 if: IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else

   38 else: %empty

   39 $@8: %empty

   40 $@9: %empty

   41 else: ELSE clb $@8 stmt_list $@9 crb

   42 $@10: %empty

   43 $@11: %empty

   44 while: WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb

   45 bin_op_for: ADD
   46           | SUB
   47           | MUL
   48           | DIV

   49 @12: %empty

   50 fn_call: ID @12 rlb fn_call_args rrb

   51 fn_call_args: %empty
   52             | id_or_digits fn_call_args_prime
   53             | bool_prod fn_call_args_prime

   54 bool_prod: BOOL

   55 fn_call_args_prime: %empty
   56                   | comma fn_call_args

   57 fn_def: %empty

   58 @13: %empty

   59 $@14: %empty

   60 @15: %empty

   61 $@16: %empty

   62 $@17: %empty

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def

   64 func_args: %empty

   65 @18: %empty

   66 $@19: %empty

   67 func_args: @18 datatype ID $@19 func_args_prime

   68 func_args_prime: %empty

   69 @20: %empty

   70 func_args_prime: @20 comma func_args

   71 datatype: INT
   72         | VOID
   73         | CHAR
   74         | BOOL

   75 relop: AND
   76      | NEQ
   77      | OR
   78      | LTEQ
   79      | GTEQ
   80      | EQ
   81      | LT
   82      | GT

   83 id_or_digits: ID
   84             | DIGITS

   85 comma: COMMA

   86 semi_colon: SEMICOLON

   87 rlb: RLB

   88 rrb: RRB

   89 clb: CLB

   90 crb: CRB


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 71
MAIN (259) 4
MACRO (260)
TYPEDEF (261)
SEMICOLON (262) 86
GLOBAL (263)
COMMA (264) 85
AMP (265)
VOID (266) 72
CHAR (267) 73
BOOL_DATATYPE (268)
DATATYPE (269)
ID (270) 7 18 50 63 67 83
BOOL (271) 31 54 74
DIGITS (272) 30 84
NEGATIVENUMBER (273)
ADD (274) 45
SUB (275) 46
MUL (276) 47
DIV (277) 48
MOD (278)
LT (279) 81
GT (280) 82
ASG (281) 18
FOR (282)
WHILE (283) 44
DO (284)
IF (285) 37
ELSE (286) 41
THEN (287) 37
BREAK (288)
CONTINUE (289)
RETURN (290) 63
GOTO (291)
ASSIGN (292) 14
CLB (293) 89
CRB (294) 90
RLB (295) 87
RRB (296) 88
SLB (297)
SRB (298)
AND (299) 75
OR (300) 77
EQ (301) 80
NEQ (302) 76
LTEQ (303) 78
GTEQ (304) 79


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
prog (51)
    on left: 4, on right: 0
$@1 (52)
    on left: 1, on right: 4
$@2 (53)
    on left: 2, on right: 4
$@3 (54)
    on left: 3, on right: 4
var_decl (55)
    on left: 5, on right: 13
exps (56)
    on left: 7, on right: 5 9
@4 (57)
    on left: 6, on right: 7
comma_exps (58)
    on left: 8 9, on right: 7
empty (59)
    on left: 10, on right: 8
stmt_list (60)
    on left: 11 12, on right: 4 12 37 41 44 63
stmt (61)
    on left: 13 14 15 16, on right: 12
assignment (62)
    on left: 18, on right: 14
@5 (63)
    on left: 17, on right: 18
assignment_prime (64)
    on left: 19 20 21, on right: 18
expressions (65)
    on left: 22 23, on right: 26
expr_rel (66)
    on left: 24, on right: 22 32
op (67)
    on left: 25 26, on right: 24
expr_binary (68)
    on left: 27, on right: 21 23 29
op_bin (69)
    on left: 28 29, on right: 27
op_rel (70)
    on left: 30 31 32, on right: 37 44
cond_loop (71)
    on left: 33 34, on right: 15
if (72)
    on left: 37, on right: 33
$@6 (73)
    on left: 35, on right: 37
$@7 (74)
    on left: 36, on right: 37
else (75)
    on left: 38 41, on right: 37
$@8 (76)
    on left: 39, on right: 41
$@9 (77)
    on left: 40, on right: 41
while (78)
    on left: 44, on right: 34
$@10 (79)
    on left: 42, on right: 44
$@11 (80)
    on left: 43, on right: 44
bin_op_for (81)
    on left: 45 46 47 48, on right: 27
fn_call (82)
    on left: 50, on right: 16 20
@12 (83)
    on left: 49, on right: 50
fn_call_args (84)
    on left: 51 52 53, on right: 50 56
bool_prod (85)
    on left: 54, on right: 53
fn_call_args_prime (86)
    on left: 55 56, on right: 52 53
fn_def (87)
    on left: 57 63, on right: 4 63
@13 (88)
    on left: 58, on right: 63
$@14 (89)
    on left: 59, on right: 63
@15 (90)
    on left: 60, on right: 63
$@16 (91)
    on left: 61, on right: 63
$@17 (92)
    on left: 62, on right: 63
func_args (93)
    on left: 64 67, on right: 63 70
@18 (94)
    on left: 65, on right: 67
$@19 (95)
    on left: 66, on right: 67
func_args_prime (96)
    on left: 68 70, on right: 67
@20 (97)
    on left: 69, on right: 70
datatype (98)
    on left: 71 72 73 74, on right: 5 63 67
relop (99)
    on left: 75 76 77 78 79 80 81 82, on right: 24
id_or_digits (100)
    on left: 83 84, on right: 19 25 28 52
comma (101)
    on left: 85, on right: 9 56 70
semi_colon (102)
    on left: 86, on right: 12
rlb (103)
    on left: 87, on right: 4 26 29 37 44 50 63
rrb (104)
    on left: 88, on right: 4 26 29 37 44 50 63
clb (105)
    on left: 89, on right: 4 37 41 44 63
crb (106)
    on left: 90, on right: 4 37 41 44 63


State 0

    0 $accept: . prog $end
    4 prog: . fn_def MAIN $@1 rlb rrb clb $@2 stmt_list $@3 crb
   57 fn_def: . %empty  [MAIN]
   63       | . datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    CHAR  shift, and go to state 3
    BOOL  shift, and go to state 4

    $default  reduce using rule 57 (fn_def)

    prog      go to state 5
    fn_def    go to state 6
    datatype  go to state 7


State 1

   71 datatype: INT .

    $default  reduce using rule 71 (datatype)


State 2

   72 datatype: VOID .

    $default  reduce using rule 72 (datatype)


State 3

   73 datatype: CHAR .

    $default  reduce using rule 73 (datatype)


State 4

   74 datatype: BOOL .

    $default  reduce using rule 74 (datatype)


State 5

    0 $accept: prog . $end

    $end  shift, and go to state 8


State 6

    4 prog: fn_def . MAIN $@1 rlb rrb clb $@2 stmt_list $@3 crb

    MAIN  shift, and go to state 9


State 7

   63 fn_def: datatype . ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def

    ID  shift, and go to state 10


State 8

    0 $accept: prog $end .

    $default  accept


State 9

    1 $@1: . %empty
    4 prog: fn_def MAIN . $@1 rlb rrb clb $@2 stmt_list $@3 crb

    $default  reduce using rule 1 ($@1)

    $@1  go to state 11


State 10

   58 @13: . %empty
   63 fn_def: datatype ID . @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def

    $default  reduce using rule 58 (@13)

    @13  go to state 12


State 11

    4 prog: fn_def MAIN $@1 . rlb rrb clb $@2 stmt_list $@3 crb
   87 rlb: . RLB

    RLB  shift, and go to state 13

    rlb  go to state 14


State 12

   63 fn_def: datatype ID @13 . rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def
   87 rlb: . RLB

    RLB  shift, and go to state 13

    rlb  go to state 15


State 13

   87 rlb: RLB .

    $default  reduce using rule 87 (rlb)


State 14

    4 prog: fn_def MAIN $@1 rlb . rrb clb $@2 stmt_list $@3 crb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 17


State 15

   59 $@14: . %empty
   63 fn_def: datatype ID @13 rlb . $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def

    $default  reduce using rule 59 ($@14)

    $@14  go to state 18


State 16

   88 rrb: RRB .

    $default  reduce using rule 88 (rrb)


State 17

    4 prog: fn_def MAIN $@1 rlb rrb . clb $@2 stmt_list $@3 crb
   89 clb: . CLB

    CLB  shift, and go to state 19

    clb  go to state 20


State 18

   63 fn_def: datatype ID @13 rlb $@14 . func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def
   64 func_args: . %empty  [RRB]
   65 @18: . %empty  [INT, VOID, CHAR, BOOL]
   67 func_args: . @18 datatype ID $@19 func_args_prime

    RRB       reduce using rule 64 (func_args)
    $default  reduce using rule 65 (@18)

    func_args  go to state 21
    @18        go to state 22


State 19

   89 clb: CLB .

    $default  reduce using rule 89 (clb)


State 20

    2 $@2: . %empty
    4 prog: fn_def MAIN $@1 rlb rrb clb . $@2 stmt_list $@3 crb

    $default  reduce using rule 2 ($@2)

    $@2  go to state 23


State 21

   63 fn_def: datatype ID @13 rlb $@14 func_args . rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 24


State 22

   67 func_args: @18 . datatype ID $@19 func_args_prime
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    CHAR  shift, and go to state 3
    BOOL  shift, and go to state 4

    datatype  go to state 25


State 23

    4 prog: fn_def MAIN $@1 rlb rrb clb $@2 . stmt_list $@3 crb
    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [CRB]
   12          | . stmt semi_colon stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 31
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 24

   60 @15: . %empty
   63 fn_def: datatype ID @13 rlb $@14 func_args rrb . @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def

    $default  reduce using rule 60 (@15)

    @15  go to state 38


State 25

   67 func_args: @18 datatype . ID $@19 func_args_prime

    ID  shift, and go to state 39


State 26

   49 @12: . %empty
   50 fn_call: ID . @12 rlb fn_call_args rrb

    $default  reduce using rule 49 (@12)

    @12  go to state 40


State 27

   44 while: WHILE . rlb op_rel rrb clb $@10 stmt_list $@11 crb
   87 rlb: . RLB

    RLB  shift, and go to state 13

    rlb  go to state 41


State 28

   37 if: IF . rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   87 rlb: . RLB

    RLB  shift, and go to state 13

    rlb  go to state 42


State 29

   14 stmt: ASSIGN . assignment
   18 assignment: . ID @5 ASG assignment_prime

    ID  shift, and go to state 43

    assignment  go to state 44


State 30

   13 stmt: var_decl .

    $default  reduce using rule 13 (stmt)


State 31

    3 $@3: . %empty
    4 prog: fn_def MAIN $@1 rlb rrb clb $@2 stmt_list . $@3 crb

    $default  reduce using rule 3 ($@3)

    $@3  go to state 45


State 32

   12 stmt_list: stmt . semi_colon stmt_list
   86 semi_colon: . SEMICOLON

    SEMICOLON  shift, and go to state 46

    semi_colon  go to state 47


State 33

   15 stmt: cond_loop .

    $default  reduce using rule 15 (stmt)


State 34

   33 cond_loop: if .

    $default  reduce using rule 33 (cond_loop)


State 35

   34 cond_loop: while .

    $default  reduce using rule 34 (cond_loop)


State 36

   16 stmt: fn_call .

    $default  reduce using rule 16 (stmt)


State 37

    5 var_decl: datatype . exps
    7 exps: . ID @4 comma_exps

    ID  shift, and go to state 48

    exps  go to state 49


State 38

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 . clb stmt_list $@16 RETURN ID crb $@17 fn_def
   89 clb: . CLB

    CLB  shift, and go to state 19

    clb  go to state 50


State 39

   66 $@19: . %empty
   67 func_args: @18 datatype ID . $@19 func_args_prime

    $default  reduce using rule 66 ($@19)

    $@19  go to state 51


State 40

   50 fn_call: ID @12 . rlb fn_call_args rrb
   87 rlb: . RLB

    RLB  shift, and go to state 13

    rlb  go to state 52


State 41

   24 expr_rel: . op relop op
   25 op: . id_or_digits
   26   | . rlb expressions rrb
   30 op_rel: . DIGITS
   31       | . BOOL
   32       | . expr_rel
   44 while: WHILE rlb . op_rel rrb clb $@10 stmt_list $@11 crb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    BOOL    shift, and go to state 54
    DIGITS  shift, and go to state 55
    RLB     shift, and go to state 13

    expr_rel      go to state 56
    op            go to state 57
    op_rel        go to state 58
    id_or_digits  go to state 59
    rlb           go to state 60


State 42

   24 expr_rel: . op relop op
   25 op: . id_or_digits
   26   | . rlb expressions rrb
   30 op_rel: . DIGITS
   31       | . BOOL
   32       | . expr_rel
   37 if: IF rlb . op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    BOOL    shift, and go to state 54
    DIGITS  shift, and go to state 55
    RLB     shift, and go to state 13

    expr_rel      go to state 56
    op            go to state 57
    op_rel        go to state 61
    id_or_digits  go to state 59
    rlb           go to state 60


State 43

   17 @5: . %empty
   18 assignment: ID . @5 ASG assignment_prime

    $default  reduce using rule 17 (@5)

    @5  go to state 62


State 44

   14 stmt: ASSIGN assignment .

    $default  reduce using rule 14 (stmt)


State 45

    4 prog: fn_def MAIN $@1 rlb rrb clb $@2 stmt_list $@3 . crb
   90 crb: . CRB

    CRB  shift, and go to state 63

    crb  go to state 64


State 46

   86 semi_colon: SEMICOLON .

    $default  reduce using rule 86 (semi_colon)


State 47

    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [RETURN, CRB]
   12          | . stmt semi_colon stmt_list
   12          | stmt semi_colon . stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 65
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 48

    6 @4: . %empty
    7 exps: ID . @4 comma_exps

    $default  reduce using rule 6 (@4)

    @4  go to state 66


State 49

    5 var_decl: datatype exps .

    $default  reduce using rule 5 (var_decl)


State 50

    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [RETURN]
   12          | . stmt semi_colon stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb . stmt_list $@16 RETURN ID crb $@17 fn_def
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 67
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 51

   67 func_args: @18 datatype ID $@19 . func_args_prime
   68 func_args_prime: . %empty  [RRB]
   69 @20: . %empty  [COMMA]
   70 func_args_prime: . @20 comma func_args

    COMMA     reduce using rule 69 (@20)
    $default  reduce using rule 68 (func_args_prime)

    func_args_prime  go to state 68
    @20              go to state 69


State 52

   50 fn_call: ID @12 rlb . fn_call_args rrb
   51 fn_call_args: . %empty  [RRB]
   52             | . id_or_digits fn_call_args_prime
   53             | . bool_prod fn_call_args_prime
   54 bool_prod: . BOOL
   83 id_or_digits: . ID
   84             | . DIGITS

    ID      shift, and go to state 53
    BOOL    shift, and go to state 70
    DIGITS  shift, and go to state 71

    $default  reduce using rule 51 (fn_call_args)

    fn_call_args  go to state 72
    bool_prod     go to state 73
    id_or_digits  go to state 74


State 53

   83 id_or_digits: ID .

    $default  reduce using rule 83 (id_or_digits)


State 54

   31 op_rel: BOOL .

    $default  reduce using rule 31 (op_rel)


State 55

   30 op_rel: DIGITS .  [RRB]
   84 id_or_digits: DIGITS .  [LT, GT, AND, OR, EQ, NEQ, LTEQ, GTEQ]

    RRB       reduce using rule 30 (op_rel)
    $default  reduce using rule 84 (id_or_digits)


State 56

   32 op_rel: expr_rel .

    $default  reduce using rule 32 (op_rel)


State 57

   24 expr_rel: op . relop op
   75 relop: . AND
   76      | . NEQ
   77      | . OR
   78      | . LTEQ
   79      | . GTEQ
   80      | . EQ
   81      | . LT
   82      | . GT

    LT    shift, and go to state 75
    GT    shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    EQ    shift, and go to state 79
    NEQ   shift, and go to state 80
    LTEQ  shift, and go to state 81
    GTEQ  shift, and go to state 82

    relop  go to state 83


State 58

   44 while: WHILE rlb op_rel . rrb clb $@10 stmt_list $@11 crb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 84


State 59

   25 op: id_or_digits .

    $default  reduce using rule 25 (op)


State 60

   22 expressions: . expr_rel
   23            | . expr_binary
   24 expr_rel: . op relop op
   25 op: . id_or_digits
   26   | . rlb expressions rrb
   26   | rlb . expressions rrb
   27 expr_binary: . op_bin bin_op_for op_bin
   28 op_bin: . id_or_digits
   29       | . rlb expr_binary rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    expressions   go to state 85
    expr_rel      go to state 86
    op            go to state 57
    expr_binary   go to state 87
    op_bin        go to state 88
    id_or_digits  go to state 89
    rlb           go to state 90


State 61

   37 if: IF rlb op_rel . rrb THEN clb $@6 stmt_list $@7 crb else
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 91


State 62

   18 assignment: ID @5 . ASG assignment_prime

    ASG  shift, and go to state 92


State 63

   90 crb: CRB .

    $default  reduce using rule 90 (crb)


State 64

    4 prog: fn_def MAIN $@1 rlb rrb clb $@2 stmt_list $@3 crb .

    $default  reduce using rule 4 (prog)


State 65

   12 stmt_list: stmt semi_colon stmt_list .

    $default  reduce using rule 12 (stmt_list)


State 66

    7 exps: ID @4 . comma_exps
    8 comma_exps: . empty
    9           | . comma exps
   10 empty: . %empty  [SEMICOLON]
   85 comma: . COMMA

    COMMA  shift, and go to state 93

    $default  reduce using rule 10 (empty)

    comma_exps  go to state 94
    empty       go to state 95
    comma       go to state 96


State 67

   61 $@16: . %empty
   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list . $@16 RETURN ID crb $@17 fn_def

    $default  reduce using rule 61 ($@16)

    $@16  go to state 97


State 68

   67 func_args: @18 datatype ID $@19 func_args_prime .

    $default  reduce using rule 67 (func_args)


State 69

   70 func_args_prime: @20 . comma func_args
   85 comma: . COMMA

    COMMA  shift, and go to state 93

    comma  go to state 98


State 70

   54 bool_prod: BOOL .

    $default  reduce using rule 54 (bool_prod)


State 71

   84 id_or_digits: DIGITS .

    $default  reduce using rule 84 (id_or_digits)


State 72

   50 fn_call: ID @12 rlb fn_call_args . rrb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 99


State 73

   53 fn_call_args: bool_prod . fn_call_args_prime
   55 fn_call_args_prime: . %empty  [RRB]
   56                   | . comma fn_call_args
   85 comma: . COMMA

    COMMA  shift, and go to state 93

    $default  reduce using rule 55 (fn_call_args_prime)

    fn_call_args_prime  go to state 100
    comma               go to state 101


State 74

   52 fn_call_args: id_or_digits . fn_call_args_prime
   55 fn_call_args_prime: . %empty  [RRB]
   56                   | . comma fn_call_args
   85 comma: . COMMA

    COMMA  shift, and go to state 93

    $default  reduce using rule 55 (fn_call_args_prime)

    fn_call_args_prime  go to state 102
    comma               go to state 101


State 75

   81 relop: LT .

    $default  reduce using rule 81 (relop)


State 76

   82 relop: GT .

    $default  reduce using rule 82 (relop)


State 77

   75 relop: AND .

    $default  reduce using rule 75 (relop)


State 78

   77 relop: OR .

    $default  reduce using rule 77 (relop)


State 79

   80 relop: EQ .

    $default  reduce using rule 80 (relop)


State 80

   76 relop: NEQ .

    $default  reduce using rule 76 (relop)


State 81

   78 relop: LTEQ .

    $default  reduce using rule 78 (relop)


State 82

   79 relop: GTEQ .

    $default  reduce using rule 79 (relop)


State 83

   24 expr_rel: op relop . op
   25 op: . id_or_digits
   26   | . rlb expressions rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    op            go to state 103
    id_or_digits  go to state 59
    rlb           go to state 60


State 84

   44 while: WHILE rlb op_rel rrb . clb $@10 stmt_list $@11 crb
   89 clb: . CLB

    CLB  shift, and go to state 19

    clb  go to state 104


State 85

   26 op: rlb expressions . rrb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 105


State 86

   22 expressions: expr_rel .

    $default  reduce using rule 22 (expressions)


State 87

   23 expressions: expr_binary .

    $default  reduce using rule 23 (expressions)


State 88

   27 expr_binary: op_bin . bin_op_for op_bin
   45 bin_op_for: . ADD
   46           | . SUB
   47           | . MUL
   48           | . DIV

    ADD  shift, and go to state 106
    SUB  shift, and go to state 107
    MUL  shift, and go to state 108
    DIV  shift, and go to state 109

    bin_op_for  go to state 110


State 89

   25 op: id_or_digits .  [LT, GT, AND, OR, EQ, NEQ, LTEQ, GTEQ]
   28 op_bin: id_or_digits .  [ADD, SUB, MUL, DIV]

    ADD       reduce using rule 28 (op_bin)
    SUB       reduce using rule 28 (op_bin)
    MUL       reduce using rule 28 (op_bin)
    DIV       reduce using rule 28 (op_bin)
    $default  reduce using rule 25 (op)


State 90

   22 expressions: . expr_rel
   23            | . expr_binary
   24 expr_rel: . op relop op
   25 op: . id_or_digits
   26   | . rlb expressions rrb
   26   | rlb . expressions rrb
   27 expr_binary: . op_bin bin_op_for op_bin
   28 op_bin: . id_or_digits
   29       | . rlb expr_binary rrb
   29       | rlb . expr_binary rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    expressions   go to state 85
    expr_rel      go to state 86
    op            go to state 57
    expr_binary   go to state 111
    op_bin        go to state 88
    id_or_digits  go to state 89
    rlb           go to state 90


State 91

   37 if: IF rlb op_rel rrb . THEN clb $@6 stmt_list $@7 crb else

    THEN  shift, and go to state 112


State 92

   18 assignment: ID @5 ASG . assignment_prime
   19 assignment_prime: . id_or_digits
   20                 | . fn_call
   21                 | . expr_binary
   27 expr_binary: . op_bin bin_op_for op_bin
   28 op_bin: . id_or_digits
   29       | . rlb expr_binary rrb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 113
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    assignment_prime  go to state 114
    expr_binary       go to state 115
    op_bin            go to state 88
    fn_call           go to state 116
    id_or_digits      go to state 117
    rlb               go to state 118


State 93

   85 comma: COMMA .

    $default  reduce using rule 85 (comma)


State 94

    7 exps: ID @4 comma_exps .

    $default  reduce using rule 7 (exps)


State 95

    8 comma_exps: empty .

    $default  reduce using rule 8 (comma_exps)


State 96

    7 exps: . ID @4 comma_exps
    9 comma_exps: comma . exps

    ID  shift, and go to state 48

    exps  go to state 119


State 97

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 . RETURN ID crb $@17 fn_def

    RETURN  shift, and go to state 120


State 98

   64 func_args: . %empty  [RRB]
   65 @18: . %empty  [INT, VOID, CHAR, BOOL]
   67 func_args: . @18 datatype ID $@19 func_args_prime
   70 func_args_prime: @20 comma . func_args

    RRB       reduce using rule 64 (func_args)
    $default  reduce using rule 65 (@18)

    func_args  go to state 121
    @18        go to state 22


State 99

   50 fn_call: ID @12 rlb fn_call_args rrb .

    $default  reduce using rule 50 (fn_call)


State 100

   53 fn_call_args: bool_prod fn_call_args_prime .

    $default  reduce using rule 53 (fn_call_args)


State 101

   51 fn_call_args: . %empty  [RRB]
   52             | . id_or_digits fn_call_args_prime
   53             | . bool_prod fn_call_args_prime
   54 bool_prod: . BOOL
   56 fn_call_args_prime: comma . fn_call_args
   83 id_or_digits: . ID
   84             | . DIGITS

    ID      shift, and go to state 53
    BOOL    shift, and go to state 70
    DIGITS  shift, and go to state 71

    $default  reduce using rule 51 (fn_call_args)

    fn_call_args  go to state 122
    bool_prod     go to state 73
    id_or_digits  go to state 74


State 102

   52 fn_call_args: id_or_digits fn_call_args_prime .

    $default  reduce using rule 52 (fn_call_args)


State 103

   24 expr_rel: op relop op .

    $default  reduce using rule 24 (expr_rel)


State 104

   42 $@10: . %empty
   44 while: WHILE rlb op_rel rrb clb . $@10 stmt_list $@11 crb

    $default  reduce using rule 42 ($@10)

    $@10  go to state 123


State 105

   26 op: rlb expressions rrb .

    $default  reduce using rule 26 (op)


State 106

   45 bin_op_for: ADD .

    $default  reduce using rule 45 (bin_op_for)


State 107

   46 bin_op_for: SUB .

    $default  reduce using rule 46 (bin_op_for)


State 108

   47 bin_op_for: MUL .

    $default  reduce using rule 47 (bin_op_for)


State 109

   48 bin_op_for: DIV .

    $default  reduce using rule 48 (bin_op_for)


State 110

   27 expr_binary: op_bin bin_op_for . op_bin
   28 op_bin: . id_or_digits
   29       | . rlb expr_binary rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    op_bin        go to state 124
    id_or_digits  go to state 125
    rlb           go to state 118


State 111

   23 expressions: expr_binary .  [RRB]
   29 op_bin: rlb expr_binary . rrb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    RRB  [reduce using rule 23 (expressions)]

    rrb  go to state 126


State 112

   37 if: IF rlb op_rel rrb THEN . clb $@6 stmt_list $@7 crb else
   89 clb: . CLB

    CLB  shift, and go to state 19

    clb  go to state 127


State 113

   49 @12: . %empty  [RLB]
   50 fn_call: ID . @12 rlb fn_call_args rrb
   83 id_or_digits: ID .  [SEMICOLON, ADD, SUB, MUL, DIV]

    RLB       reduce using rule 49 (@12)
    $default  reduce using rule 83 (id_or_digits)

    @12  go to state 40


State 114

   18 assignment: ID @5 ASG assignment_prime .

    $default  reduce using rule 18 (assignment)


State 115

   21 assignment_prime: expr_binary .

    $default  reduce using rule 21 (assignment_prime)


State 116

   20 assignment_prime: fn_call .

    $default  reduce using rule 20 (assignment_prime)


State 117

   19 assignment_prime: id_or_digits .  [SEMICOLON]
   28 op_bin: id_or_digits .  [ADD, SUB, MUL, DIV]

    SEMICOLON  reduce using rule 19 (assignment_prime)
    $default   reduce using rule 28 (op_bin)


State 118

   27 expr_binary: . op_bin bin_op_for op_bin
   28 op_bin: . id_or_digits
   29       | . rlb expr_binary rrb
   29       | rlb . expr_binary rrb
   83 id_or_digits: . ID
   84             | . DIGITS
   87 rlb: . RLB

    ID      shift, and go to state 53
    DIGITS  shift, and go to state 71
    RLB     shift, and go to state 13

    expr_binary   go to state 128
    op_bin        go to state 88
    id_or_digits  go to state 125
    rlb           go to state 118


State 119

    9 comma_exps: comma exps .

    $default  reduce using rule 9 (comma_exps)


State 120

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN . ID crb $@17 fn_def

    ID  shift, and go to state 129


State 121

   70 func_args_prime: @20 comma func_args .

    $default  reduce using rule 70 (func_args_prime)


State 122

   56 fn_call_args_prime: comma fn_call_args .

    $default  reduce using rule 56 (fn_call_args_prime)


State 123

    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [CRB]
   12          | . stmt semi_colon stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   44      | WHILE rlb op_rel rrb clb $@10 . stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 130
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 124

   27 expr_binary: op_bin bin_op_for op_bin .

    $default  reduce using rule 27 (expr_binary)


State 125

   28 op_bin: id_or_digits .

    $default  reduce using rule 28 (op_bin)


State 126

   29 op_bin: rlb expr_binary rrb .

    $default  reduce using rule 29 (op_bin)


State 127

   35 $@6: . %empty
   37 if: IF rlb op_rel rrb THEN clb . $@6 stmt_list $@7 crb else

    $default  reduce using rule 35 ($@6)

    $@6  go to state 131


State 128

   29 op_bin: rlb expr_binary . rrb
   88 rrb: . RRB

    RRB  shift, and go to state 16

    rrb  go to state 126


State 129

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID . crb $@17 fn_def
   90 crb: . CRB

    CRB  shift, and go to state 63

    crb  go to state 132


State 130

   43 $@11: . %empty
   44 while: WHILE rlb op_rel rrb clb $@10 stmt_list . $@11 crb

    $default  reduce using rule 43 ($@11)

    $@11  go to state 133


State 131

    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [CRB]
   12          | . stmt semi_colon stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   37   | IF rlb op_rel rrb THEN clb $@6 . stmt_list $@7 crb else
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 134
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 132

   62 $@17: . %empty
   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb . $@17 fn_def

    $default  reduce using rule 62 ($@17)

    $@17  go to state 135


State 133

   44 while: WHILE rlb op_rel rrb clb $@10 stmt_list $@11 . crb
   90 crb: . CRB

    CRB  shift, and go to state 63

    crb  go to state 136


State 134

   36 $@7: . %empty
   37 if: IF rlb op_rel rrb THEN clb $@6 stmt_list . $@7 crb else

    $default  reduce using rule 36 ($@7)

    $@7  go to state 137


State 135

   57 fn_def: . %empty  [MAIN]
   63       | . datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def
   63       | datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 . fn_def
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    CHAR  shift, and go to state 3
    BOOL  shift, and go to state 4

    $default  reduce using rule 57 (fn_def)

    fn_def    go to state 138
    datatype  go to state 7


State 136

   44 while: WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb .

    $default  reduce using rule 44 (while)


State 137

   37 if: IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 . crb else
   90 crb: . CRB

    CRB  shift, and go to state 63

    crb  go to state 139


State 138

   63 fn_def: datatype ID @13 rlb $@14 func_args rrb @15 clb stmt_list $@16 RETURN ID crb $@17 fn_def .

    $default  reduce using rule 63 (fn_def)


State 139

   37 if: IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb . else
   38 else: . %empty  [SEMICOLON]
   41     | . ELSE clb $@8 stmt_list $@9 crb

    ELSE  shift, and go to state 140

    $default  reduce using rule 38 (else)

    else  go to state 141


State 140

   41 else: ELSE . clb $@8 stmt_list $@9 crb
   89 clb: . CLB

    CLB  shift, and go to state 19

    clb  go to state 142


State 141

   37 if: IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else .

    $default  reduce using rule 37 (if)


State 142

   39 $@8: . %empty
   41 else: ELSE clb . $@8 stmt_list $@9 crb

    $default  reduce using rule 39 ($@8)

    $@8  go to state 143


State 143

    5 var_decl: . datatype exps
   11 stmt_list: . %empty  [CRB]
   12          | . stmt semi_colon stmt_list
   13 stmt: . var_decl
   14     | . ASSIGN assignment
   15     | . cond_loop
   16     | . fn_call
   33 cond_loop: . if
   34          | . while
   37 if: . IF rlb op_rel rrb THEN clb $@6 stmt_list $@7 crb else
   41 else: ELSE clb $@8 . stmt_list $@9 crb
   44 while: . WHILE rlb op_rel rrb clb $@10 stmt_list $@11 crb
   50 fn_call: . ID @12 rlb fn_call_args rrb
   71 datatype: . INT
   72         | . VOID
   73         | . CHAR
   74         | . BOOL

    INT     shift, and go to state 1
    VOID    shift, and go to state 2
    CHAR    shift, and go to state 3
    ID      shift, and go to state 26
    BOOL    shift, and go to state 4
    WHILE   shift, and go to state 27
    IF      shift, and go to state 28
    ASSIGN  shift, and go to state 29

    $default  reduce using rule 11 (stmt_list)

    var_decl   go to state 30
    stmt_list  go to state 144
    stmt       go to state 32
    cond_loop  go to state 33
    if         go to state 34
    while      go to state 35
    fn_call    go to state 36
    datatype   go to state 37


State 144

   40 $@9: . %empty
   41 else: ELSE clb $@8 stmt_list . $@9 crb

    $default  reduce using rule 40 ($@9)

    $@9  go to state 145


State 145

   41 else: ELSE clb $@8 stmt_list $@9 . crb
   90 crb: . CRB

    CRB  shift, and go to state 63

    crb  go to state 146


State 146

   41 else: ELSE clb $@8 stmt_list $@9 crb .

    $default  reduce using rule 41 (else)
